
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id             String   @id @default(cuid())
  name           String
  description    String
  price          Float
  image          String?
  isAvailable    Boolean  @default(true)
  isDailySpecial Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  sideDishes MenuItemSideDish[]

  @@map("menu_items")
}

model SideDish {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItems MenuItemSideDish[]

  @@map("side_dishes")
}

model MenuItemSideDish {
  id          String   @id @default(cuid())
  menuItemId  String
  sideDishId  String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  sideDish    SideDish @relation(fields: [sideDishId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([menuItemId, sideDishId])
  @@map("menu_item_side_dishes")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model GalleryImage {
  id        String          @id @default(cuid())
  url       String
  alt       String
  category  GalleryCategory
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("gallery_images")
}

enum GalleryCategory {
  FOOD
  AMBIANCE
  EVENT
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String    @default("user")
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
